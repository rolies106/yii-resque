#!/usr/bin/env php
<?php
$includeFiles=getenv('INCLUDE_FILES');
if ($includeFiles) {
    $includeFiles = explode(',', $includeFiles);
    foreach ($includeFiles as $file) {
        require_once $file;
    }
}

$yiic=getenv('YII_PATH').'/yii.php';
$config=getenv('APP_PATH').'/config/console.php';

require_once($yiic);

Yii::createConsoleApplication($config);

# Turn off our amazing library autoload
spl_autoload_unregister(array('YiiBase','autoload'));

    // Find and initialize Composer
    $files = array(
        dirname(__FILE__) . '/../RResqueAutoloader.php',
    );

    foreach ($files as $file) {
        if (file_exists($file)) {
            require_once $file;
            break;
        }
    }

    if (!class_exists('RResqueAutoloader', false)) {
        die(
            'Can not load RResqueAutoloader in yii-resque folder.'
        );
    } else {
        RResqueAutoloader::register();
    }

# Give back the power to Yii
spl_autoload_register(array('YiiBase','autoload'));

$QUEUE = getenv('QUEUE');
if(empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}

$REDIS_BACKEND = getenv('REDIS_BACKEND');
$REDIS_BACKEND_DB = getenv('REDIS_BACKEND_DB');
$REDIS_AUTH = getenv('REDIS_AUTH');

if(!empty($REDIS_BACKEND)) {
    $REDIS_BACKEND_DB = (!empty($REDIS_BACKEND_DB)) ? $REDIS_BACKEND_DB : 0;
    Resque::setBackend($REDIS_BACKEND, $REDIS_BACKEND_DB, $REDIS_AUTH);
}

// Set log level for resque-scheduler
$logLevel = 0;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if(!empty($LOGGING) || !empty($VERBOSE)) {
    $logLevel = Resque_Worker::LOG_NORMAL;
} else if(!empty($VVERBOSE)) {
    $logLevel = Resque_Worker::LOG_VERBOSE;
}

$logger = null;
$LOG_HANDLER = getenv('LOGHANDLER');
$LOG_HANDLER_TARGET = getenv('LOGHANDLERTARGET');

if (class_exists('MonologInit_MonologInit')) {
    if (!empty($LOG_HANDLER) && !empty($LOG_HANDLER_TARGET)) {
        $logger = new MonologInit_MonologInit($LOG_HANDLER, $LOG_HANDLER_TARGET);
    } else {
        fwrite(STDOUT, '*** loghandler or logtarget is not set.'."\n");    
    }
} else {
    fwrite(STDOUT, '*** MonologInit_MonologInit logger cannot be found, continue without loghandler.'."\n");
}

// Check for jobs every $interval seconds
$interval = 5;
$INTERVAL = getenv('INTERVAL');
if(!empty($INTERVAL)) {
    $interval = $INTERVAL;
}

$PREFIX = getenv('PREFIX');
if(!empty($PREFIX)) {
    fwrite(STDOUT, '*** Prefix set to '.$PREFIX."\n");
    Resque::redis()->prefix($PREFIX);
}

$worker = new ResqueScheduler_Worker();
if (!empty($logger)) {
    $worker->registerLogger($logger);    
} else {
    fwrite(STDOUT, "*** Starting scheduler worker\n");
}
$worker->logLevel = $logLevel;

$PIDFILE = getenv('PIDFILE');
if ($PIDFILE) {
    file_put_contents($PIDFILE, getmypid()) or
        die('Could not write PID information to ' . $PIDFILE);
}

$worker->work($interval);